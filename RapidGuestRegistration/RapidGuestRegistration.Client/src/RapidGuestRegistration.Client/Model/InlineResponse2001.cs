/*
 * RapidGuestRegistration - OpenAPI 3.0
 *
 * This is the RapidGuestRegistration API, used for everything from creating tables to managing users, as well as registering for guests.
 *
 * The version of the OpenAPI document: 3.0.2
 * Contact: group-b@rapidguestregistration.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RapidGuestRegistration.Client.Client.OpenAPIDateConverter;

namespace RapidGuestRegistration.Client.Model
{
    /// <summary>
    /// InlineResponse2001
    /// </summary>
    [DataContract(Name = "inline_response_200_1")]
    public partial class InlineResponse2001 : IEquatable<InlineResponse2001>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2001" /> class.
        /// </summary>
        /// <param name="locationId">Id of the location at which to look for guests in time range.</param>
        /// <param name="tableId">Id of the table at which to look for guests in time range.</param>
        /// <param name="datetimeFrom">datetime from which was searched for guests at locationid, tableid.</param>
        /// <param name="datetimeTo">datetime up to which was searched for guests at locationid, tableid.</param>
        /// <param name="pdf">Base64-encoded contents of pdf.</param>
        public InlineResponse2001(long locationId = default(long), long tableId = default(long), long datetimeFrom = default(long), long datetimeTo = default(long), string pdf = default(string))
        {
            this.LocationId = locationId;
            this.TableId = tableId;
            this.DatetimeFrom = datetimeFrom;
            this.DatetimeTo = datetimeTo;
            this.Pdf = pdf;
        }

        /// <summary>
        /// Id of the location at which to look for guests in time range
        /// </summary>
        /// <value>Id of the location at which to look for guests in time range</value>
        [DataMember(Name = "locationId", EmitDefaultValue = false)]
        public long LocationId { get; set; }

        /// <summary>
        /// Id of the table at which to look for guests in time range
        /// </summary>
        /// <value>Id of the table at which to look for guests in time range</value>
        [DataMember(Name = "tableId", EmitDefaultValue = false)]
        public long TableId { get; set; }

        /// <summary>
        /// datetime from which was searched for guests at locationid, tableid
        /// </summary>
        /// <value>datetime from which was searched for guests at locationid, tableid</value>
        [DataMember(Name = "datetimeFrom", EmitDefaultValue = false)]
        public long DatetimeFrom { get; set; }

        /// <summary>
        /// datetime up to which was searched for guests at locationid, tableid
        /// </summary>
        /// <value>datetime up to which was searched for guests at locationid, tableid</value>
        [DataMember(Name = "datetimeTo", EmitDefaultValue = false)]
        public long DatetimeTo { get; set; }

        /// <summary>
        /// Base64-encoded contents of pdf
        /// </summary>
        /// <value>Base64-encoded contents of pdf</value>
        [DataMember(Name = "pdf", EmitDefaultValue = false)]
        public string Pdf { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2001 {\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  TableId: ").Append(TableId).Append("\n");
            sb.Append("  DatetimeFrom: ").Append(DatetimeFrom).Append("\n");
            sb.Append("  DatetimeTo: ").Append(DatetimeTo).Append("\n");
            sb.Append("  Pdf: ").Append(Pdf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2001);
        }

        /// <summary>
        /// Returns true if InlineResponse2001 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2001 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.TableId == input.TableId ||
                    this.TableId.Equals(input.TableId)
                ) && 
                (
                    this.DatetimeFrom == input.DatetimeFrom ||
                    this.DatetimeFrom.Equals(input.DatetimeFrom)
                ) && 
                (
                    this.DatetimeTo == input.DatetimeTo ||
                    this.DatetimeTo.Equals(input.DatetimeTo)
                ) && 
                (
                    this.Pdf == input.Pdf ||
                    (this.Pdf != null &&
                    this.Pdf.Equals(input.Pdf))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                hashCode = hashCode * 59 + this.TableId.GetHashCode();
                hashCode = hashCode * 59 + this.DatetimeFrom.GetHashCode();
                hashCode = hashCode * 59 + this.DatetimeTo.GetHashCode();
                if (this.Pdf != null)
                    hashCode = hashCode * 59 + this.Pdf.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
