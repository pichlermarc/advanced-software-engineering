/*
 * RapidGuestRegistration - OpenAPI 3.0
 *
 * This is the RapidGuestRegistration API, used for everything from creating tables to managing users, as well as registering for guests.
 *
 * The version of the OpenAPI document: 3.0.2
 * Contact: group-b@rapidguestregistration.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RapidGuestRegistration.Client.Client.OpenAPIDateConverter;

namespace RapidGuestRegistration.Client.Model
{
    /// <summary>
    /// Booking
    /// </summary>
    [DataContract(Name = "Booking")]
    public partial class Booking : IEquatable<Booking>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Booking" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="location">location.</param>
        /// <param name="table">table.</param>
        /// <param name="name">name.</param>
        /// <param name="people">people.</param>
        /// <param name="email">email.</param>
        public Booking(long id = default(long), string location = default(string), string table = default(string), string name = default(string), long people = default(long), string email = default(string))
        {
            this.Id = id;
            this.LocationBooking = location;
            this.TableBooking = table;
            this.Name = name;
            this.People = people;
            this.Email = email;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets LocationBooking
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string LocationBooking { get; set; }

        /// <summary>
        /// Gets or Sets TableBooking
        /// </summary>
        [DataMember(Name = "table", EmitDefaultValue = false)]
        public string TableBooking { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets People
        /// </summary>
        [DataMember(Name = "people", EmitDefaultValue = false)]
        public long People { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Booking {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LocationBooking: ").Append(LocationBooking).Append("\n");
            sb.Append("  TableBooking: ").Append(TableBooking).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  People: ").Append(People).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Booking);
        }

        /// <summary>
        /// Returns true if Booking instances are equal
        /// </summary>
        /// <param name="input">Instance of Booking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Booking input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.LocationBooking == input.LocationBooking ||
                    (this.LocationBooking != null &&
                    this.LocationBooking.Equals(input.LocationBooking))
                ) && 
                (
                    this.TableBooking == input.TableBooking ||
                    (this.TableBooking != null &&
                    this.TableBooking.Equals(input.TableBooking))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.People == input.People ||
                    this.People.Equals(input.People)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LocationBooking != null)
                    hashCode = hashCode * 59 + this.LocationBooking.GetHashCode();
                if (this.TableBooking != null)
                    hashCode = hashCode * 59 + this.TableBooking.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.People.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
