/*
 * RapidGuestRegistration - OpenAPI 3.0
 *
 * This is the RapidGuestRegistration API, used for everything from creating tables to managing users, as well as registering for guests.
 *
 * The version of the OpenAPI document: 3.0.2
 * Contact: group-b@rapidguestregistration.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RapidGuestRegistration.Client.Client;
using RapidGuestRegistration.Client.Model;

namespace RapidGuestRegistration.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new location
        /// </summary>
        /// <remarks>
        /// Add a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>Location</returns>
        Location AddLocation(Location location = default(Location));

        /// <summary>
        /// Add a new location
        /// </summary>
        /// <remarks>
        /// Add a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        ApiResponse<Location> AddLocationWithHttpInfo(Location location = default(Location));
        /// <summary>
        /// Add a new table on this location
        /// </summary>
        /// <remarks>
        /// Add a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object AddTableAtLocation(long locationId, Object body = default(Object));

        /// <summary>
        /// Add a new table on this location
        /// </summary>
        /// <remarks>
        /// Add a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddTableAtLocationWithHttpInfo(long locationId, Object body = default(Object));
        /// <summary>
        /// Add a new User
        /// </summary>
        /// <remarks>
        /// Add a User
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <returns>User</returns>
        User AddUser(User user = default(User));

        /// <summary>
        /// Add a new User
        /// </summary>
        /// <remarks>
        /// Add a User
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> AddUserWithHttpInfo(User user = default(User));
        /// <summary>
        /// Delete a specific location.
        /// </summary>
        /// <remarks>
        /// Deletes the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>Location</returns>
        Location DeleteLocation(long locationId);

        /// <summary>
        /// Delete a specific location.
        /// </summary>
        /// <remarks>
        /// Deletes the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>ApiResponse of Location</returns>
        ApiResponse<Location> DeleteLocationWithHttpInfo(long locationId);
        /// <summary>
        /// Delete this table
        /// </summary>
        /// <remarks>
        /// Delete the table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>Object</returns>
        Object DeleteTableAtLocation(long locationId, long tableId);

        /// <summary>
        /// Delete this table
        /// </summary>
        /// <remarks>
        /// Delete the table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteTableAtLocationWithHttpInfo(long locationId, long tableId);
        /// <summary>
        /// Delete a specific user.
        /// </summary>
        /// <remarks>
        /// Deletes the user with the user ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <returns>User</returns>
        User DeleteUser(long userId);

        /// <summary>
        /// Delete a specific user.
        /// </summary>
        /// <remarks>
        /// Deletes the user with the user ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> DeleteUserWithHttpInfo(long userId);
        /// <summary>
        /// Get a specific location.
        /// </summary>
        /// <remarks>
        /// Gets the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>Location</returns>
        Location GetLocation(long locationId);

        /// <summary>
        /// Get a specific location.
        /// </summary>
        /// <remarks>
        /// Gets the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>ApiResponse of Location</returns>
        ApiResponse<Location> GetLocationWithHttpInfo(long locationId);
        /// <summary>
        /// Get your locations
        /// </summary>
        /// <remarks>
        /// Get locations associated with your user
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Location&gt;</returns>
        List<Location> GetLocations();

        /// <summary>
        /// Get your locations
        /// </summary>
        /// <remarks>
        /// Get locations associated with your user
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Location&gt;</returns>
        ApiResponse<List<Location>> GetLocationsWithHttpInfo();
        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Get report of reporttype on this table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="datetimeFrom">Datetime from which to search for guests at tableid locationid.</param>
        /// <param name="datetimeTo">Datetime to which to search for guests at tableid locationid.</param>
        /// <param name="reportType">type of report to retrieve.</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetReportForTable(long locationId, long tableId, long datetimeFrom, long datetimeTo, string reportType);

        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Get report of reporttype on this table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="datetimeFrom">Datetime from which to search for guests at tableid locationid.</param>
        /// <param name="datetimeTo">Datetime to which to search for guests at tableid locationid.</param>
        /// <param name="reportType">type of report to retrieve.</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetReportForTableWithHttpInfo(long locationId, long tableId, long datetimeFrom, long datetimeTo, string reportType);
        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Get the amount of people registered on this table in the given time-range.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to get activity from</param>
        /// <param name="tableId">ID of the table to get activity from</param>
        /// <param name="from">Activity from</param>
        /// <param name="to">Activity to</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetTableActivity(long locationId, long tableId, DateTime from, DateTime to);

        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Get the amount of people registered on this table in the given time-range.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to get activity from</param>
        /// <param name="tableId">ID of the table to get activity from</param>
        /// <param name="from">Activity from</param>
        /// <param name="to">Activity to</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetTableActivityWithHttpInfo(long locationId, long tableId, DateTime from, DateTime to);
        /// <summary>
        /// Get your tables
        /// </summary>
        /// <remarks>
        /// Get table with the given ID associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>Object</returns>
        Object GetTableAtLocation(long locationId, long tableId);

        /// <summary>
        /// Get your tables
        /// </summary>
        /// <remarks>
        /// Get table with the given ID associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetTableAtLocationWithHttpInfo(long locationId, long tableId);
        /// <summary>
        /// Get your location&#39;s tables
        /// </summary>
        /// <remarks>
        /// Get tables associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetTablesAtLocation(long locationId);

        /// <summary>
        /// Get your location&#39;s tables
        /// </summary>
        /// <remarks>
        /// Get tables associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetTablesAtLocationWithHttpInfo(long locationId);
        /// <summary>
        /// Get a specific user.
        /// </summary>
        /// <remarks>
        /// Gets the user with the user ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <returns>User</returns>
        User GetUser(long userId);

        /// <summary>
        /// Get a specific user.
        /// </summary>
        /// <remarks>
        /// Gets the user with the user ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo(long userId);
        /// <summary>
        /// Get Users
        /// </summary>
        /// <remarks>
        /// Get Users
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetUsers();

        /// <summary>
        /// Get Users
        /// </summary>
        /// <remarks>
        /// Get Users
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetUsersWithHttpInfo();
        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Register on this table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <returns>Guest</returns>
        Guest RegisterAtTable(long locationId, long tableId, Guest guest = default(Guest));

        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Register on this table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <returns>ApiResponse of Guest</returns>
        ApiResponse<Guest> RegisterAtTableWithHttpInfo(long locationId, long tableId, Guest guest = default(Guest));
        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>Location</returns>
        Location UpdateLocation(Location location = default(Location));

        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        ApiResponse<Location> UpdateLocationWithHttpInfo(Location location = default(Location));
        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <returns>Location</returns>
        Location UpdateLocationWithId(long locationId, Location location = default(Location));

        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        ApiResponse<Location> UpdateLocationWithIdWithHttpInfo(long locationId, Location location = default(Location));
        /// <summary>
        /// Update an existing table
        /// </summary>
        /// <remarks>
        /// Update a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateTableAtLocation(long locationId, long tableId, Object body = default(Object));

        /// <summary>
        /// Update an existing table
        /// </summary>
        /// <remarks>
        /// Update a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateTableAtLocationWithHttpInfo(long locationId, long tableId, Object body = default(Object));
        /// <summary>
        /// Update an existing User
        /// </summary>
        /// <remarks>
        /// Update a User
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <returns>User</returns>
        User UpdateUser(User user = default(User));

        /// <summary>
        /// Update an existing User
        /// </summary>
        /// <remarks>
        /// Update a User
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UpdateUserWithHttpInfo(User user = default(User));
        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// Update a user
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="user"> (optional)</param>
        /// <returns>User</returns>
        User UpdateUserWithId(long userId, User user = default(User));

        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// Update a user
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="user"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UpdateUserWithIdWithHttpInfo(long userId, User user = default(User));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a new location
        /// </summary>
        /// <remarks>
        /// Add a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        System.Threading.Tasks.Task<Location> AddLocationAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new location
        /// </summary>
        /// <remarks>
        /// Add a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> AddLocationWithHttpInfoAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a new table on this location
        /// </summary>
        /// <remarks>
        /// Add a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddTableAtLocationAsync(long locationId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new table on this location
        /// </summary>
        /// <remarks>
        /// Add a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddTableAtLocationWithHttpInfoAsync(long locationId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a new User
        /// </summary>
        /// <remarks>
        /// Add a User
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> AddUserAsync(User user = default(User), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new User
        /// </summary>
        /// <remarks>
        /// Add a User
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> AddUserWithHttpInfoAsync(User user = default(User), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a specific location.
        /// </summary>
        /// <remarks>
        /// Deletes the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        System.Threading.Tasks.Task<Location> DeleteLocationAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a specific location.
        /// </summary>
        /// <remarks>
        /// Deletes the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> DeleteLocationWithHttpInfoAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete this table
        /// </summary>
        /// <remarks>
        /// Delete the table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteTableAtLocationAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete this table
        /// </summary>
        /// <remarks>
        /// Delete the table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTableAtLocationWithHttpInfoAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a specific user.
        /// </summary>
        /// <remarks>
        /// Deletes the user with the user ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> DeleteUserAsync(long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a specific user.
        /// </summary>
        /// <remarks>
        /// Deletes the user with the user ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> DeleteUserWithHttpInfoAsync(long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a specific location.
        /// </summary>
        /// <remarks>
        /// Gets the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        System.Threading.Tasks.Task<Location> GetLocationAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a specific location.
        /// </summary>
        /// <remarks>
        /// Gets the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> GetLocationWithHttpInfoAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get your locations
        /// </summary>
        /// <remarks>
        /// Get locations associated with your user
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Location&gt;</returns>
        System.Threading.Tasks.Task<List<Location>> GetLocationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get your locations
        /// </summary>
        /// <remarks>
        /// Get locations associated with your user
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Location&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Location>>> GetLocationsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Get report of reporttype on this table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="datetimeFrom">Datetime from which to search for guests at tableid locationid.</param>
        /// <param name="datetimeTo">Datetime to which to search for guests at tableid locationid.</param>
        /// <param name="reportType">type of report to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetReportForTableAsync(long locationId, long tableId, long datetimeFrom, long datetimeTo, string reportType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Get report of reporttype on this table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="datetimeFrom">Datetime from which to search for guests at tableid locationid.</param>
        /// <param name="datetimeTo">Datetime to which to search for guests at tableid locationid.</param>
        /// <param name="reportType">type of report to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetReportForTableWithHttpInfoAsync(long locationId, long tableId, long datetimeFrom, long datetimeTo, string reportType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Get the amount of people registered on this table in the given time-range.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to get activity from</param>
        /// <param name="tableId">ID of the table to get activity from</param>
        /// <param name="from">Activity from</param>
        /// <param name="to">Activity to</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetTableActivityAsync(long locationId, long tableId, DateTime from, DateTime to, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Get the amount of people registered on this table in the given time-range.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to get activity from</param>
        /// <param name="tableId">ID of the table to get activity from</param>
        /// <param name="from">Activity from</param>
        /// <param name="to">Activity to</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetTableActivityWithHttpInfoAsync(long locationId, long tableId, DateTime from, DateTime to, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get your tables
        /// </summary>
        /// <remarks>
        /// Get table with the given ID associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetTableAtLocationAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get your tables
        /// </summary>
        /// <remarks>
        /// Get table with the given ID associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetTableAtLocationWithHttpInfoAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get your location&#39;s tables
        /// </summary>
        /// <remarks>
        /// Get tables associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetTablesAtLocationAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get your location&#39;s tables
        /// </summary>
        /// <remarks>
        /// Get tables associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetTablesAtLocationWithHttpInfoAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a specific user.
        /// </summary>
        /// <remarks>
        /// Gets the user with the user ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync(long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a specific user.
        /// </summary>
        /// <remarks>
        /// Gets the user with the user ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserWithHttpInfoAsync(long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Users
        /// </summary>
        /// <remarks>
        /// Get Users
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetUsersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Users
        /// </summary>
        /// <remarks>
        /// Get Users
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetUsersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Register on this table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guest</returns>
        System.Threading.Tasks.Task<Guest> RegisterAtTableAsync(long locationId, long tableId, Guest guest = default(Guest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Register on this table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guest)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guest>> RegisterAtTableWithHttpInfoAsync(long locationId, long tableId, Guest guest = default(Guest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        System.Threading.Tasks.Task<Location> UpdateLocationAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> UpdateLocationWithHttpInfoAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        System.Threading.Tasks.Task<Location> UpdateLocationWithIdAsync(long locationId, Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> UpdateLocationWithIdWithHttpInfoAsync(long locationId, Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing table
        /// </summary>
        /// <remarks>
        /// Update a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateTableAtLocationAsync(long locationId, long tableId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing table
        /// </summary>
        /// <remarks>
        /// Update a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTableAtLocationWithHttpInfoAsync(long locationId, long tableId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing User
        /// </summary>
        /// <remarks>
        /// Update a User
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UpdateUserAsync(User user = default(User), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing User
        /// </summary>
        /// <remarks>
        /// Update a User
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserWithHttpInfoAsync(User user = default(User), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// Update a user
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UpdateUserWithIdAsync(long userId, User user = default(User), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// Update a user
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserWithIdWithHttpInfoAsync(long userId, User user = default(User), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private RapidGuestRegistration.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = RapidGuestRegistration.Client.Client.Configuration.MergeConfigurations(
                RapidGuestRegistration.Client.Client.GlobalConfiguration.Instance,
                new RapidGuestRegistration.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RapidGuestRegistration.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RapidGuestRegistration.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RapidGuestRegistration.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(RapidGuestRegistration.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RapidGuestRegistration.Client.Client.Configuration.MergeConfigurations(
                RapidGuestRegistration.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RapidGuestRegistration.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RapidGuestRegistration.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RapidGuestRegistration.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(RapidGuestRegistration.Client.Client.ISynchronousClient client, RapidGuestRegistration.Client.Client.IAsynchronousClient asyncClient, RapidGuestRegistration.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RapidGuestRegistration.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RapidGuestRegistration.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RapidGuestRegistration.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RapidGuestRegistration.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RapidGuestRegistration.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a new location Add a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>Location</returns>
        public Location AddLocation(Location location = default(Location))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = AddLocationWithHttpInfo(location);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new location Add a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Location> AddLocationWithHttpInfo(Location location = default(Location))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = location;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Location>("/location", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new location Add a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> AddLocationAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = await AddLocationWithHttpInfoAsync(location, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new location Add a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Location>> AddLocationWithHttpInfoAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = location;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Location>("/location", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new table on this location Add a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object AddTableAtLocation(long locationId, Object body = default(Object))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Object> localVarResponse = AddTableAtLocationWithHttpInfo(locationId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new table on this location Add a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Object> AddTableAtLocationWithHttpInfo(long locationId, Object body = default(Object))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/location/{locationId}/table", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddTableAtLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new table on this location Add a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddTableAtLocationAsync(long locationId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Object> localVarResponse = await AddTableAtLocationWithHttpInfoAsync(locationId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new table on this location Add a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Object>> AddTableAtLocationWithHttpInfoAsync(long locationId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/location/{locationId}/table", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddTableAtLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new User Add a User
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <returns>User</returns>
        public User AddUser(User user = default(User))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<User> localVarResponse = AddUserWithHttpInfo(user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new User Add a User
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<User> AddUserWithHttpInfo(User user = default(User))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = user;


            // make the HTTP request
            var localVarResponse = this.Client.Post<User>("/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new User Add a User
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> AddUserAsync(User user = default(User), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<User> localVarResponse = await AddUserWithHttpInfoAsync(user, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new User Add a User
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<User>> AddUserWithHttpInfoAsync(User user = default(User), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = user;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific location. Deletes the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>Location</returns>
        public Location DeleteLocation(long locationId)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = DeleteLocationWithHttpInfo(locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific location. Deletes the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>ApiResponse of Location</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Location> DeleteLocationWithHttpInfo(long locationId)
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Location>("/location/{locationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific location. Deletes the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> DeleteLocationAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = await DeleteLocationWithHttpInfoAsync(locationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific location. Deletes the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Location>> DeleteLocationWithHttpInfoAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Location>("/location/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete this table Delete the table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>Object</returns>
        public Object DeleteTableAtLocation(long locationId, long tableId)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Object> localVarResponse = DeleteTableAtLocationWithHttpInfo(locationId, tableId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete this table Delete the table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>ApiResponse of Object</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Object> DeleteTableAtLocationWithHttpInfo(long locationId, long tableId)
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/location/{locationId}/table/{tableId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTableAtLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete this table Delete the table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteTableAtLocationAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Object> localVarResponse = await DeleteTableAtLocationWithHttpInfoAsync(locationId, tableId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete this table Delete the table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Object>> DeleteTableAtLocationWithHttpInfoAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/location/{locationId}/table/{tableId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTableAtLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific user. Deletes the user with the user ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <returns>User</returns>
        public User DeleteUser(long userId)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<User> localVarResponse = DeleteUserWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific user. Deletes the user with the user ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <returns>ApiResponse of User</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<User> DeleteUserWithHttpInfo(long userId)
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<User>("/user/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific user. Deletes the user with the user ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> DeleteUserAsync(long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<User> localVarResponse = await DeleteUserWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific user. Deletes the user with the user ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<User>> DeleteUserWithHttpInfoAsync(long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<User>("/user/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific location. Gets the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>Location</returns>
        public Location GetLocation(long locationId)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = GetLocationWithHttpInfo(locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific location. Gets the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>ApiResponse of Location</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Location> GetLocationWithHttpInfo(long locationId)
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Location>("/location/{locationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific location. Gets the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> GetLocationAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = await GetLocationWithHttpInfoAsync(locationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific location. Gets the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Location>> GetLocationWithHttpInfoAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Location>("/location/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your locations Get locations associated with your user
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Location&gt;</returns>
        public List<Location> GetLocations()
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<Location>> localVarResponse = GetLocationsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your locations Get locations associated with your user
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Location&gt;</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<List<Location>> GetLocationsWithHttpInfo()
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Location>>("/location", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your locations Get locations associated with your user
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Location&gt;</returns>
        public async System.Threading.Tasks.Task<List<Location>> GetLocationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<Location>> localVarResponse = await GetLocationsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your locations Get locations associated with your user
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Location&gt;)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<List<Location>>> GetLocationsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Location>>("/location", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register on this table on this location. Get report of reporttype on this table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="datetimeFrom">Datetime from which to search for guests at tableid locationid.</param>
        /// <param name="datetimeTo">Datetime to which to search for guests at tableid locationid.</param>
        /// <param name="reportType">type of report to retrieve.</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetReportForTable(long locationId, long tableId, long datetimeFrom, long datetimeTo, string reportType)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<InlineResponse2001> localVarResponse = GetReportForTableWithHttpInfo(locationId, tableId, datetimeFrom, datetimeTo, reportType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register on this table on this location. Get report of reporttype on this table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="datetimeFrom">Datetime from which to search for guests at tableid locationid.</param>
        /// <param name="datetimeTo">Datetime to which to search for guests at tableid locationid.</param>
        /// <param name="reportType">type of report to retrieve.</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<InlineResponse2001> GetReportForTableWithHttpInfo(long locationId, long tableId, long datetimeFrom, long datetimeTo, string reportType)
        {
            // verify the required parameter 'reportType' is set
            if (reportType == null)
                throw new RapidGuestRegistration.Client.Client.ApiException(400, "Missing required parameter 'reportType' when calling DefaultApi->GetReportForTable");

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportType", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(reportType)); // path parameter
            localVarRequestOptions.QueryParameters.Add(RapidGuestRegistration.Client.Client.ClientUtils.ParameterToMultiMap("", "datetimeFrom", datetimeFrom));
            localVarRequestOptions.QueryParameters.Add(RapidGuestRegistration.Client.Client.ClientUtils.ParameterToMultiMap("", "datetimeTo", datetimeTo));


            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2001>("/location/{locationId}/table/{tableId}/report/{reportType}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportForTable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register on this table on this location. Get report of reporttype on this table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="datetimeFrom">Datetime from which to search for guests at tableid locationid.</param>
        /// <param name="datetimeTo">Datetime to which to search for guests at tableid locationid.</param>
        /// <param name="reportType">type of report to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetReportForTableAsync(long locationId, long tableId, long datetimeFrom, long datetimeTo, string reportType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<InlineResponse2001> localVarResponse = await GetReportForTableWithHttpInfoAsync(locationId, tableId, datetimeFrom, datetimeTo, reportType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register on this table on this location. Get report of reporttype on this table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="datetimeFrom">Datetime from which to search for guests at tableid locationid.</param>
        /// <param name="datetimeTo">Datetime to which to search for guests at tableid locationid.</param>
        /// <param name="reportType">type of report to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<InlineResponse2001>> GetReportForTableWithHttpInfoAsync(long locationId, long tableId, long datetimeFrom, long datetimeTo, string reportType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reportType' is set
            if (reportType == null)
                throw new RapidGuestRegistration.Client.Client.ApiException(400, "Missing required parameter 'reportType' when calling DefaultApi->GetReportForTable");


            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportType", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(reportType)); // path parameter
            localVarRequestOptions.QueryParameters.Add(RapidGuestRegistration.Client.Client.ClientUtils.ParameterToMultiMap("", "datetimeFrom", datetimeFrom));
            localVarRequestOptions.QueryParameters.Add(RapidGuestRegistration.Client.Client.ClientUtils.ParameterToMultiMap("", "datetimeTo", datetimeTo));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/location/{locationId}/table/{tableId}/report/{reportType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportForTable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register on this table on this location. Get the amount of people registered on this table in the given time-range.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to get activity from</param>
        /// <param name="tableId">ID of the table to get activity from</param>
        /// <param name="from">Activity from</param>
        /// <param name="to">Activity to</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetTableActivity(long locationId, long tableId, DateTime from, DateTime to)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<InlineResponse200> localVarResponse = GetTableActivityWithHttpInfo(locationId, tableId, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register on this table on this location. Get the amount of people registered on this table in the given time-range.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to get activity from</param>
        /// <param name="tableId">ID of the table to get activity from</param>
        /// <param name="from">Activity from</param>
        /// <param name="to">Activity to</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<InlineResponse200> GetTableActivityWithHttpInfo(long locationId, long tableId, DateTime from, DateTime to)
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(RapidGuestRegistration.Client.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(RapidGuestRegistration.Client.Client.ClientUtils.ParameterToMultiMap("", "to", to));


            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse200>("/location/{locationId}/table/{tableId}/activity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTableActivity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register on this table on this location. Get the amount of people registered on this table in the given time-range.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to get activity from</param>
        /// <param name="tableId">ID of the table to get activity from</param>
        /// <param name="from">Activity from</param>
        /// <param name="to">Activity to</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetTableActivityAsync(long locationId, long tableId, DateTime from, DateTime to, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<InlineResponse200> localVarResponse = await GetTableActivityWithHttpInfoAsync(locationId, tableId, from, to, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register on this table on this location. Get the amount of people registered on this table in the given time-range.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to get activity from</param>
        /// <param name="tableId">ID of the table to get activity from</param>
        /// <param name="from">Activity from</param>
        /// <param name="to">Activity to</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<InlineResponse200>> GetTableActivityWithHttpInfoAsync(long locationId, long tableId, DateTime from, DateTime to, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(RapidGuestRegistration.Client.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(RapidGuestRegistration.Client.Client.ClientUtils.ParameterToMultiMap("", "to", to));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/location/{locationId}/table/{tableId}/activity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTableActivity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your tables Get table with the given ID associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>Object</returns>
        public Object GetTableAtLocation(long locationId, long tableId)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Object> localVarResponse = GetTableAtLocationWithHttpInfo(locationId, tableId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your tables Get table with the given ID associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>ApiResponse of Object</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Object> GetTableAtLocationWithHttpInfo(long locationId, long tableId)
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/location/{locationId}/table/{tableId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTableAtLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your tables Get table with the given ID associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetTableAtLocationAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Object> localVarResponse = await GetTableAtLocationWithHttpInfoAsync(locationId, tableId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your tables Get table with the given ID associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Object>> GetTableAtLocationWithHttpInfoAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/location/{locationId}/table/{tableId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTableAtLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your location&#39;s tables Get tables associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetTablesAtLocation(long locationId)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<Object>> localVarResponse = GetTablesAtLocationWithHttpInfo(locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your location&#39;s tables Get tables associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<List<Object>> GetTablesAtLocationWithHttpInfo(long locationId)
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Object>>("/location/{locationId}/table", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTablesAtLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your location&#39;s tables Get tables associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetTablesAtLocationAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<Object>> localVarResponse = await GetTablesAtLocationWithHttpInfoAsync(locationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your location&#39;s tables Get tables associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<List<Object>>> GetTablesAtLocationWithHttpInfoAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Object>>("/location/{locationId}/table", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTablesAtLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific user. Gets the user with the user ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <returns>User</returns>
        public User GetUser(long userId)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<User> localVarResponse = GetUserWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific user. Gets the user with the user ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <returns>ApiResponse of User</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<User> GetUserWithHttpInfo(long userId)
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/user/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific user. Gets the user with the user ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync(long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<User> localVarResponse = await GetUserWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific user. Gets the user with the user ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<User>> GetUserWithHttpInfoAsync(long userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/user/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Users Get Users
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetUsers()
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<User>> localVarResponse = GetUsersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Users Get Users
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<List<User>> GetUsersWithHttpInfo()
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<User>>("/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Users Get Users
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetUsersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<User>> localVarResponse = await GetUsersWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Users Get Users
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<List<User>>> GetUsersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register on this table on this location. Register on this table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <returns>Guest</returns>
        public Guest RegisterAtTable(long locationId, long tableId, Guest guest = default(Guest))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Guest> localVarResponse = RegisterAtTableWithHttpInfo(locationId, tableId, guest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register on this table on this location. Register on this table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <returns>ApiResponse of Guest</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Guest> RegisterAtTableWithHttpInfo(long locationId, long tableId, Guest guest = default(Guest))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            localVarRequestOptions.Data = guest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Guest>("/location/{locationId}/table/{tableId}/register", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterAtTable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register on this table on this location. Register on this table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guest</returns>
        public async System.Threading.Tasks.Task<Guest> RegisterAtTableAsync(long locationId, long tableId, Guest guest = default(Guest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Guest> localVarResponse = await RegisterAtTableWithHttpInfoAsync(locationId, tableId, guest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register on this table on this location. Register on this table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guest)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Guest>> RegisterAtTableWithHttpInfoAsync(long locationId, long tableId, Guest guest = default(Guest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            localVarRequestOptions.Data = guest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Guest>("/location/{locationId}/table/{tableId}/register", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterAtTable", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>Location</returns>
        public Location UpdateLocation(Location location = default(Location))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = UpdateLocationWithHttpInfo(location);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Location> UpdateLocationWithHttpInfo(Location location = default(Location))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = location;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Location>("/location", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> UpdateLocationAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = await UpdateLocationWithHttpInfoAsync(location, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Location>> UpdateLocationWithHttpInfoAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = location;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Location>("/location", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <returns>Location</returns>
        public Location UpdateLocationWithId(long locationId, Location location = default(Location))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = UpdateLocationWithIdWithHttpInfo(locationId, location);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Location> UpdateLocationWithIdWithHttpInfo(long locationId, Location location = default(Location))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = location;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Location>("/location/{locationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLocationWithId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> UpdateLocationWithIdAsync(long locationId, Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = await UpdateLocationWithIdWithHttpInfoAsync(locationId, location, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Location>> UpdateLocationWithIdWithHttpInfoAsync(long locationId, Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = location;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Location>("/location/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLocationWithId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing table Update a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateTableAtLocation(long locationId, long tableId, Object body = default(Object))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Object> localVarResponse = UpdateTableAtLocationWithHttpInfo(locationId, tableId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing table Update a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Object> UpdateTableAtLocationWithHttpInfo(long locationId, long tableId, Object body = default(Object))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/location/{locationId}/table/{tableId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTableAtLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing table Update a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateTableAtLocationAsync(long locationId, long tableId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Object> localVarResponse = await UpdateTableAtLocationWithHttpInfoAsync(locationId, tableId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing table Update a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Object>> UpdateTableAtLocationWithHttpInfoAsync(long locationId, long tableId, Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/location/{locationId}/table/{tableId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTableAtLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing User Update a User
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <returns>User</returns>
        public User UpdateUser(User user = default(User))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<User> localVarResponse = UpdateUserWithHttpInfo(user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing User Update a User
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<User> UpdateUserWithHttpInfo(User user = default(User))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = user;


            // make the HTTP request
            var localVarResponse = this.Client.Put<User>("/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing User Update a User
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UpdateUserAsync(User user = default(User), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<User> localVarResponse = await UpdateUserWithHttpInfoAsync(user, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing User Update a User
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<User>> UpdateUserWithHttpInfoAsync(User user = default(User), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = user;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<User>("/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing user Update a user
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="user"> (optional)</param>
        /// <returns>User</returns>
        public User UpdateUserWithId(long userId, User user = default(User))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<User> localVarResponse = UpdateUserWithIdWithHttpInfo(userId, user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing user Update a user
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="user"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<User> UpdateUserWithIdWithHttpInfo(long userId, User user = default(User))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = user;


            // make the HTTP request
            var localVarResponse = this.Client.Post<User>("/user/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserWithId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing user Update a user
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UpdateUserWithIdAsync(long userId, User user = default(User), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<User> localVarResponse = await UpdateUserWithIdWithHttpInfoAsync(userId, user, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing user Update a user
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to return.</param>
        /// <param name="user"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<User>> UpdateUserWithIdWithHttpInfoAsync(long userId, User user = default(User), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = user;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/user/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserWithId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
