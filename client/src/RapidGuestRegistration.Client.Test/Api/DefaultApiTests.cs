/*
 * RapidGuestRegistration - OpenAPI 3.0
 *
 * This is the RapidGuestRegistration API, used for everything from creating tables to managing users, as well as registering for guests.
 *
 * The version of the OpenAPI document: 3.0.2
 * Contact: group-b@rapidguestregistration.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using RapidGuestRegistration.Client.Client;
using RapidGuestRegistration.Client.Api;
// uncomment below to import models
//using RapidGuestRegistration.Client.Model;

namespace RapidGuestRegistration.Client.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            instance = new DefaultApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefaultApi
            //Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test LocationGet
        /// </summary>
        [Fact]
        public void LocationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.LocationGet();
            //Assert.IsType<List<Location>>(response);
        }

        /// <summary>
        /// Test LocationLocationIdDelete
        /// </summary>
        [Fact]
        public void LocationLocationIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long locationId = null;
            //var response = instance.LocationLocationIdDelete(locationId);
            //Assert.IsType<Location>(response);
        }

        /// <summary>
        /// Test LocationLocationIdGet
        /// </summary>
        [Fact]
        public void LocationLocationIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long locationId = null;
            //var response = instance.LocationLocationIdGet(locationId);
            //Assert.IsType<Location>(response);
        }

        /// <summary>
        /// Test LocationLocationIdPost
        /// </summary>
        [Fact]
        public void LocationLocationIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long locationId = null;
            //Location location = null;
            //var response = instance.LocationLocationIdPost(locationId, location);
            //Assert.IsType<Location>(response);
        }

        /// <summary>
        /// Test LocationLocationIdTableGet
        /// </summary>
        [Fact]
        public void LocationLocationIdTableGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long locationId = null;
            //var response = instance.LocationLocationIdTableGet(locationId);
            //Assert.IsType<List<Table>>(response);
        }

        /// <summary>
        /// Test LocationLocationIdTablePost
        /// </summary>
        [Fact]
        public void LocationLocationIdTablePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long locationId = null;
            //Table table = null;
            //var response = instance.LocationLocationIdTablePost(locationId, table);
            //Assert.IsType<Table>(response);
        }

        /// <summary>
        /// Test LocationLocationIdTableTableIdDelete
        /// </summary>
        [Fact]
        public void LocationLocationIdTableTableIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long locationId = null;
            //long tableId = null;
            //var response = instance.LocationLocationIdTableTableIdDelete(locationId, tableId);
            //Assert.IsType<List<Table>>(response);
        }

        /// <summary>
        /// Test LocationLocationIdTableTableIdGet
        /// </summary>
        [Fact]
        public void LocationLocationIdTableTableIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long locationId = null;
            //long tableId = null;
            //var response = instance.LocationLocationIdTableTableIdGet(locationId, tableId);
            //Assert.IsType<List<Table>>(response);
        }

        /// <summary>
        /// Test LocationLocationIdTableTableIdPost
        /// </summary>
        [Fact]
        public void LocationLocationIdTableTableIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long locationId = null;
            //long tableId = null;
            //Table table = null;
            //var response = instance.LocationLocationIdTableTableIdPost(locationId, tableId, table);
            //Assert.IsType<Table>(response);
        }

        /// <summary>
        /// Test LocationLocationIdTableTableIdRegisterPost
        /// </summary>
        [Fact]
        public void LocationLocationIdTableTableIdRegisterPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long locationId = null;
            //long tableId = null;
            //Guest guest = null;
            //var response = instance.LocationLocationIdTableTableIdRegisterPost(locationId, tableId, guest);
            //Assert.IsType<Guest>(response);
        }

        /// <summary>
        /// Test LocationPost
        /// </summary>
        [Fact]
        public void LocationPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Location location = null;
            //var response = instance.LocationPost(location);
            //Assert.IsType<Location>(response);
        }

        /// <summary>
        /// Test LocationPut
        /// </summary>
        [Fact]
        public void LocationPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Location location = null;
            //var response = instance.LocationPut(location);
            //Assert.IsType<Location>(response);
        }
    }
}
