/*
 * RapidGuestRegistration - OpenAPI 3.0
 *
 * This is the RapidGuestRegistration API, used for everything from creating tables to managing users, as well as registering for guests.
 *
 * The version of the OpenAPI document: 3.0.2
 * Contact: group-b@rapidguestregistration.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RapidGuestRegistration.Client.Client;
using RapidGuestRegistration.Client.Model;

namespace RapidGuestRegistration.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get your locations
        /// </summary>
        /// <remarks>
        /// Get locations associated with your user
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Location&gt;</returns>
        List<Location> LocationGet();

        /// <summary>
        /// Get your locations
        /// </summary>
        /// <remarks>
        /// Get locations associated with your user
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Location&gt;</returns>
        ApiResponse<List<Location>> LocationGetWithHttpInfo();
        /// <summary>
        /// Delete a specific location.
        /// </summary>
        /// <remarks>
        /// Deletes the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>Location</returns>
        Location LocationLocationIdDelete(long locationId);

        /// <summary>
        /// Delete a specific location.
        /// </summary>
        /// <remarks>
        /// Deletes the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>ApiResponse of Location</returns>
        ApiResponse<Location> LocationLocationIdDeleteWithHttpInfo(long locationId);
        /// <summary>
        /// Get a specific location.
        /// </summary>
        /// <remarks>
        /// Gets the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>Location</returns>
        Location LocationLocationIdGet(long locationId);

        /// <summary>
        /// Get a specific location.
        /// </summary>
        /// <remarks>
        /// Gets the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>ApiResponse of Location</returns>
        ApiResponse<Location> LocationLocationIdGetWithHttpInfo(long locationId);
        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <returns>Location</returns>
        Location LocationLocationIdPost(long locationId, Location location = default(Location));

        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        ApiResponse<Location> LocationLocationIdPostWithHttpInfo(long locationId, Location location = default(Location));
        /// <summary>
        /// Get your location&#39;s tables
        /// </summary>
        /// <remarks>
        /// Get tables associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>List&lt;Table&gt;</returns>
        List<Table> LocationLocationIdTableGet(long locationId);

        /// <summary>
        /// Get your location&#39;s tables
        /// </summary>
        /// <remarks>
        /// Get tables associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>ApiResponse of List&lt;Table&gt;</returns>
        ApiResponse<List<Table>> LocationLocationIdTableGetWithHttpInfo(long locationId);
        /// <summary>
        /// Add a new table on this location
        /// </summary>
        /// <remarks>
        /// Add a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <returns>Table</returns>
        Table LocationLocationIdTablePost(long locationId, Table table = default(Table));

        /// <summary>
        /// Add a new table on this location
        /// </summary>
        /// <remarks>
        /// Add a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <returns>ApiResponse of Table</returns>
        ApiResponse<Table> LocationLocationIdTablePostWithHttpInfo(long locationId, Table table = default(Table));
        /// <summary>
        /// Delete this table
        /// </summary>
        /// <remarks>
        /// Delete the table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>List&lt;Table&gt;</returns>
        List<Table> LocationLocationIdTableTableIdDelete(long locationId, long tableId);

        /// <summary>
        /// Delete this table
        /// </summary>
        /// <remarks>
        /// Delete the table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>ApiResponse of List&lt;Table&gt;</returns>
        ApiResponse<List<Table>> LocationLocationIdTableTableIdDeleteWithHttpInfo(long locationId, long tableId);
        /// <summary>
        /// Get your tables
        /// </summary>
        /// <remarks>
        /// Get tables associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>List&lt;Table&gt;</returns>
        List<Table> LocationLocationIdTableTableIdGet(long locationId, long tableId);

        /// <summary>
        /// Get your tables
        /// </summary>
        /// <remarks>
        /// Get tables associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>ApiResponse of List&lt;Table&gt;</returns>
        ApiResponse<List<Table>> LocationLocationIdTableTableIdGetWithHttpInfo(long locationId, long tableId);
        /// <summary>
        /// Update an existing table
        /// </summary>
        /// <remarks>
        /// Update a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <returns>Table</returns>
        Table LocationLocationIdTableTableIdPost(long locationId, long tableId, Table table = default(Table));

        /// <summary>
        /// Update an existing table
        /// </summary>
        /// <remarks>
        /// Update a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <returns>ApiResponse of Table</returns>
        ApiResponse<Table> LocationLocationIdTableTableIdPostWithHttpInfo(long locationId, long tableId, Table table = default(Table));
        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Register on this table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <returns>Guest</returns>
        Guest LocationLocationIdTableTableIdRegisterPost(long locationId, long tableId, Guest guest = default(Guest));

        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Register on this table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <returns>ApiResponse of Guest</returns>
        ApiResponse<Guest> LocationLocationIdTableTableIdRegisterPostWithHttpInfo(long locationId, long tableId, Guest guest = default(Guest));
        /// <summary>
        /// Add a new location
        /// </summary>
        /// <remarks>
        /// Add a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>Location</returns>
        Location LocationPost(Location location = default(Location));

        /// <summary>
        /// Add a new location
        /// </summary>
        /// <remarks>
        /// Add a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        ApiResponse<Location> LocationPostWithHttpInfo(Location location = default(Location));
        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>Location</returns>
        Location LocationPut(Location location = default(Location));

        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        ApiResponse<Location> LocationPutWithHttpInfo(Location location = default(Location));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get your locations
        /// </summary>
        /// <remarks>
        /// Get locations associated with your user
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Location&gt;</returns>
        System.Threading.Tasks.Task<List<Location>> LocationGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get your locations
        /// </summary>
        /// <remarks>
        /// Get locations associated with your user
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Location&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Location>>> LocationGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a specific location.
        /// </summary>
        /// <remarks>
        /// Deletes the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        System.Threading.Tasks.Task<Location> LocationLocationIdDeleteAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a specific location.
        /// </summary>
        /// <remarks>
        /// Deletes the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> LocationLocationIdDeleteWithHttpInfoAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a specific location.
        /// </summary>
        /// <remarks>
        /// Gets the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        System.Threading.Tasks.Task<Location> LocationLocationIdGetAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a specific location.
        /// </summary>
        /// <remarks>
        /// Gets the location with the location ID.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> LocationLocationIdGetWithHttpInfoAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        System.Threading.Tasks.Task<Location> LocationLocationIdPostAsync(long locationId, Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> LocationLocationIdPostWithHttpInfoAsync(long locationId, Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get your location&#39;s tables
        /// </summary>
        /// <remarks>
        /// Get tables associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Table&gt;</returns>
        System.Threading.Tasks.Task<List<Table>> LocationLocationIdTableGetAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get your location&#39;s tables
        /// </summary>
        /// <remarks>
        /// Get tables associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Table&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Table>>> LocationLocationIdTableGetWithHttpInfoAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a new table on this location
        /// </summary>
        /// <remarks>
        /// Add a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Table</returns>
        System.Threading.Tasks.Task<Table> LocationLocationIdTablePostAsync(long locationId, Table table = default(Table), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new table on this location
        /// </summary>
        /// <remarks>
        /// Add a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Table)</returns>
        System.Threading.Tasks.Task<ApiResponse<Table>> LocationLocationIdTablePostWithHttpInfoAsync(long locationId, Table table = default(Table), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete this table
        /// </summary>
        /// <remarks>
        /// Delete the table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Table&gt;</returns>
        System.Threading.Tasks.Task<List<Table>> LocationLocationIdTableTableIdDeleteAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete this table
        /// </summary>
        /// <remarks>
        /// Delete the table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Table&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Table>>> LocationLocationIdTableTableIdDeleteWithHttpInfoAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get your tables
        /// </summary>
        /// <remarks>
        /// Get tables associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Table&gt;</returns>
        System.Threading.Tasks.Task<List<Table>> LocationLocationIdTableTableIdGetAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get your tables
        /// </summary>
        /// <remarks>
        /// Get tables associated with this location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Table&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Table>>> LocationLocationIdTableTableIdGetWithHttpInfoAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing table
        /// </summary>
        /// <remarks>
        /// Update a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Table</returns>
        System.Threading.Tasks.Task<Table> LocationLocationIdTableTableIdPostAsync(long locationId, long tableId, Table table = default(Table), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing table
        /// </summary>
        /// <remarks>
        /// Update a table
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Table)</returns>
        System.Threading.Tasks.Task<ApiResponse<Table>> LocationLocationIdTableTableIdPostWithHttpInfoAsync(long locationId, long tableId, Table table = default(Table), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Register on this table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guest</returns>
        System.Threading.Tasks.Task<Guest> LocationLocationIdTableTableIdRegisterPostAsync(long locationId, long tableId, Guest guest = default(Guest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register on this table on this location.
        /// </summary>
        /// <remarks>
        /// Register on this table on this location.
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guest)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guest>> LocationLocationIdTableTableIdRegisterPostWithHttpInfoAsync(long locationId, long tableId, Guest guest = default(Guest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a new location
        /// </summary>
        /// <remarks>
        /// Add a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        System.Threading.Tasks.Task<Location> LocationPostAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new location
        /// </summary>
        /// <remarks>
        /// Add a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> LocationPostWithHttpInfoAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        System.Threading.Tasks.Task<Location> LocationPutAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing location
        /// </summary>
        /// <remarks>
        /// Update a location
        /// </remarks>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> LocationPutWithHttpInfoAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private RapidGuestRegistration.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = RapidGuestRegistration.Client.Client.Configuration.MergeConfigurations(
                RapidGuestRegistration.Client.Client.GlobalConfiguration.Instance,
                new RapidGuestRegistration.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RapidGuestRegistration.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RapidGuestRegistration.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RapidGuestRegistration.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(RapidGuestRegistration.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RapidGuestRegistration.Client.Client.Configuration.MergeConfigurations(
                RapidGuestRegistration.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RapidGuestRegistration.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RapidGuestRegistration.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RapidGuestRegistration.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(RapidGuestRegistration.Client.Client.ISynchronousClient client, RapidGuestRegistration.Client.Client.IAsynchronousClient asyncClient, RapidGuestRegistration.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RapidGuestRegistration.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RapidGuestRegistration.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RapidGuestRegistration.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RapidGuestRegistration.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RapidGuestRegistration.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get your locations Get locations associated with your user
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Location&gt;</returns>
        public List<Location> LocationGet()
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<Location>> localVarResponse = LocationGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your locations Get locations associated with your user
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Location&gt;</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<List<Location>> LocationGetWithHttpInfo()
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Location>>("/location", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your locations Get locations associated with your user
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Location&gt;</returns>
        public async System.Threading.Tasks.Task<List<Location>> LocationGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<Location>> localVarResponse = await LocationGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your locations Get locations associated with your user
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Location&gt;)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<List<Location>>> LocationGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Location>>("/location", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific location. Deletes the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>Location</returns>
        public Location LocationLocationIdDelete(long locationId)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = LocationLocationIdDeleteWithHttpInfo(locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific location. Deletes the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>ApiResponse of Location</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Location> LocationLocationIdDeleteWithHttpInfo(long locationId)
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Location>("/location/{locationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a specific location. Deletes the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> LocationLocationIdDeleteAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = await LocationLocationIdDeleteWithHttpInfoAsync(locationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific location. Deletes the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Location>> LocationLocationIdDeleteWithHttpInfoAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Location>("/location/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific location. Gets the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>Location</returns>
        public Location LocationLocationIdGet(long locationId)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = LocationLocationIdGetWithHttpInfo(locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific location. Gets the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>ApiResponse of Location</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Location> LocationLocationIdGetWithHttpInfo(long locationId)
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Location>("/location/{locationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific location. Gets the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> LocationLocationIdGetAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = await LocationLocationIdGetWithHttpInfoAsync(locationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific location. Gets the location with the location ID.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Location>> LocationLocationIdGetWithHttpInfoAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Location>("/location/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <returns>Location</returns>
        public Location LocationLocationIdPost(long locationId, Location location = default(Location))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = LocationLocationIdPostWithHttpInfo(locationId, location);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Location> LocationLocationIdPostWithHttpInfo(long locationId, Location location = default(Location))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = location;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Location>("/location/{locationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> LocationLocationIdPostAsync(long locationId, Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = await LocationLocationIdPostWithHttpInfoAsync(locationId, location, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Location>> LocationLocationIdPostWithHttpInfoAsync(long locationId, Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = location;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Location>("/location/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your location&#39;s tables Get tables associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>List&lt;Table&gt;</returns>
        public List<Table> LocationLocationIdTableGet(long locationId)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<Table>> localVarResponse = LocationLocationIdTableGetWithHttpInfo(locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your location&#39;s tables Get tables associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <returns>ApiResponse of List&lt;Table&gt;</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<List<Table>> LocationLocationIdTableGetWithHttpInfo(long locationId)
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Table>>("/location/{locationId}/table", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdTableGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your location&#39;s tables Get tables associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Table&gt;</returns>
        public async System.Threading.Tasks.Task<List<Table>> LocationLocationIdTableGetAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<Table>> localVarResponse = await LocationLocationIdTableGetWithHttpInfoAsync(locationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your location&#39;s tables Get tables associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Table&gt;)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<List<Table>>> LocationLocationIdTableGetWithHttpInfoAsync(long locationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Table>>("/location/{locationId}/table", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdTableGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new table on this location Add a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <returns>Table</returns>
        public Table LocationLocationIdTablePost(long locationId, Table table = default(Table))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Table> localVarResponse = LocationLocationIdTablePostWithHttpInfo(locationId, table);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new table on this location Add a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <returns>ApiResponse of Table</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Table> LocationLocationIdTablePostWithHttpInfo(long locationId, Table table = default(Table))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = table;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Table>("/location/{locationId}/table", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdTablePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new table on this location Add a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Table</returns>
        public async System.Threading.Tasks.Task<Table> LocationLocationIdTablePostAsync(long locationId, Table table = default(Table), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Table> localVarResponse = await LocationLocationIdTablePostWithHttpInfoAsync(locationId, table, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new table on this location Add a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Table)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Table>> LocationLocationIdTablePostWithHttpInfoAsync(long locationId, Table table = default(Table), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.Data = table;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Table>("/location/{locationId}/table", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdTablePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete this table Delete the table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>List&lt;Table&gt;</returns>
        public List<Table> LocationLocationIdTableTableIdDelete(long locationId, long tableId)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<Table>> localVarResponse = LocationLocationIdTableTableIdDeleteWithHttpInfo(locationId, tableId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete this table Delete the table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>ApiResponse of List&lt;Table&gt;</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<List<Table>> LocationLocationIdTableTableIdDeleteWithHttpInfo(long locationId, long tableId)
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<Table>>("/location/{locationId}/table/{tableId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdTableTableIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete this table Delete the table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Table&gt;</returns>
        public async System.Threading.Tasks.Task<List<Table>> LocationLocationIdTableTableIdDeleteAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<Table>> localVarResponse = await LocationLocationIdTableTableIdDeleteWithHttpInfoAsync(locationId, tableId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete this table Delete the table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Table&gt;)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<List<Table>>> LocationLocationIdTableTableIdDeleteWithHttpInfoAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<Table>>("/location/{locationId}/table/{tableId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdTableTableIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your tables Get tables associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>List&lt;Table&gt;</returns>
        public List<Table> LocationLocationIdTableTableIdGet(long locationId, long tableId)
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<Table>> localVarResponse = LocationLocationIdTableTableIdGetWithHttpInfo(locationId, tableId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your tables Get tables associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <returns>ApiResponse of List&lt;Table&gt;</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<List<Table>> LocationLocationIdTableTableIdGetWithHttpInfo(long locationId, long tableId)
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Table>>("/location/{locationId}/table/{tableId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdTableTableIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your tables Get tables associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Table&gt;</returns>
        public async System.Threading.Tasks.Task<List<Table>> LocationLocationIdTableTableIdGetAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<List<Table>> localVarResponse = await LocationLocationIdTableTableIdGetWithHttpInfoAsync(locationId, tableId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your tables Get tables associated with this location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Table&gt;)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<List<Table>>> LocationLocationIdTableTableIdGetWithHttpInfoAsync(long locationId, long tableId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Table>>("/location/{locationId}/table/{tableId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdTableTableIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing table Update a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <returns>Table</returns>
        public Table LocationLocationIdTableTableIdPost(long locationId, long tableId, Table table = default(Table))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Table> localVarResponse = LocationLocationIdTableTableIdPostWithHttpInfo(locationId, tableId, table);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing table Update a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <returns>ApiResponse of Table</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Table> LocationLocationIdTableTableIdPostWithHttpInfo(long locationId, long tableId, Table table = default(Table))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            localVarRequestOptions.Data = table;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Table>("/location/{locationId}/table/{tableId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdTableTableIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing table Update a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Table</returns>
        public async System.Threading.Tasks.Task<Table> LocationLocationIdTableTableIdPostAsync(long locationId, long tableId, Table table = default(Table), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Table> localVarResponse = await LocationLocationIdTableTableIdPostWithHttpInfoAsync(locationId, tableId, table, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing table Update a table
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to return.</param>
        /// <param name="tableId">ID of the location to return.</param>
        /// <param name="table"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Table)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Table>> LocationLocationIdTableTableIdPostWithHttpInfoAsync(long locationId, long tableId, Table table = default(Table), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            localVarRequestOptions.Data = table;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Table>("/location/{locationId}/table/{tableId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdTableTableIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register on this table on this location. Register on this table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <returns>Guest</returns>
        public Guest LocationLocationIdTableTableIdRegisterPost(long locationId, long tableId, Guest guest = default(Guest))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Guest> localVarResponse = LocationLocationIdTableTableIdRegisterPostWithHttpInfo(locationId, tableId, guest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register on this table on this location. Register on this table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <returns>ApiResponse of Guest</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Guest> LocationLocationIdTableTableIdRegisterPostWithHttpInfo(long locationId, long tableId, Guest guest = default(Guest))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            localVarRequestOptions.Data = guest;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Guest>("/location/{locationId}/table/{tableId}/register", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdTableTableIdRegisterPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register on this table on this location. Register on this table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guest</returns>
        public async System.Threading.Tasks.Task<Guest> LocationLocationIdTableTableIdRegisterPostAsync(long locationId, long tableId, Guest guest = default(Guest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Guest> localVarResponse = await LocationLocationIdTableTableIdRegisterPostWithHttpInfoAsync(locationId, tableId, guest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register on this table on this location. Register on this table on this location.
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">ID of the location to register on.</param>
        /// <param name="tableId">ID of the table to register on.</param>
        /// <param name="guest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guest)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Guest>> LocationLocationIdTableTableIdRegisterPostWithHttpInfoAsync(long locationId, long tableId, Guest guest = default(Guest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("locationId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(locationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tableId", RapidGuestRegistration.Client.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            localVarRequestOptions.Data = guest;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Guest>("/location/{locationId}/table/{tableId}/register", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationLocationIdTableTableIdRegisterPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new location Add a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>Location</returns>
        public Location LocationPost(Location location = default(Location))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = LocationPostWithHttpInfo(location);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new location Add a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Location> LocationPostWithHttpInfo(Location location = default(Location))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = location;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Location>("/location", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new location Add a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> LocationPostAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = await LocationPostWithHttpInfoAsync(location, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new location Add a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Location>> LocationPostWithHttpInfoAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = location;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Location>("/location", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>Location</returns>
        public Location LocationPut(Location location = default(Location))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = LocationPutWithHttpInfo(location);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        public RapidGuestRegistration.Client.Client.ApiResponse<Location> LocationPutWithHttpInfo(Location location = default(Location))
        {
            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = location;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Location>("/location", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> LocationPutAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RapidGuestRegistration.Client.Client.ApiResponse<Location> localVarResponse = await LocationPutWithHttpInfoAsync(location, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing location Update a location
        /// </summary>
        /// <exception cref="RapidGuestRegistration.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<RapidGuestRegistration.Client.Client.ApiResponse<Location>> LocationPutWithHttpInfoAsync(Location location = default(Location), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RapidGuestRegistration.Client.Client.RequestOptions localVarRequestOptions = new RapidGuestRegistration.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RapidGuestRegistration.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = location;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Location>("/location", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
